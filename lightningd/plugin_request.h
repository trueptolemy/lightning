#ifndef LIGHTNING_LIGHTNINGD_PLUGIN_REQUEST_H
#define LIGHTNING_LIGHTNINGD_PLUGIN_REQUEST_H

#include "config.h"
#include <ccan/autodata/autodata.h>
#include <ccan/tal/tal.h>
#include <ccan/typesafe_cb/typesafe_cb.h>
#include <lightningd/json_stream.h>
#include <lightningd/lightningd.h>
#include <lightningd/plugin.h>

bool check_request_label(const char *label);

struct plugin_request {
	const char *name;
	void (*response_cb)(void *arg, const char *buffer, const jsmntok_t *toks);
	void (*serialize_payload)(void *src, struct json_stream *dest);

	const char *label;
	/* Which plugin has registered this request? */
	struct plugin *plugin;
};
AUTODATA_TYPE(requests, struct plugin_request);

/* Do not call this directly, rather use the `plugin_request_call_name`
 * wrappers generated by the `PLUGIN_REQUEST_REGISTER` macro.
 */
void plugin_request_call_(struct lightningd *ld, const struct plugin_request *request,
		       void *payload, void *cb_arg);


/* Create a small facade in from of `plugin_request_call_` to make sure
 * arguments are of the correct type before downcasting them to `void
 * *`. Not really necessary, but nice since it also makes sure that
 * the method-name is correct for the call.
 */
/* FIXME: Find a way to avoid back-to-back declaration and definition */
#define PLUGIN_REQUEST_CALL_DEF(name, payload_type, response_cb_arg_type)         \
	UNNEEDED static inline void plugin_request_call_##name(                   \
	    struct lightningd *ld, payload_type payload,                       \
	    response_cb_arg_type cb_arg)                                       \
	{                                                                      \
		plugin_request_call_(ld, &name##_request_gen, (void *)payload,       \
				  (void *)cb_arg);                             \
	}

/* Typechecked registration of a plugin request. We check that the
 * serialize_payload function converts an object of type payload_type
 * to a json_stream (.params object in the JSON-RPC request), that the
 * deserialize_response function converts from the JSON-RPC response
 * json_stream to an object of type response_type and that the
 * response_cb function accepts the deserialized response format and
 * an arbitrary extra argument used to maintain context.
 */
#define REGISTER_PLUGIN_REQUEST(name, response_cb, response_cb_arg_type,          \
			     serialize_payload, payload_type, label)                  \
	struct plugin_request name##_request_gen = {                                 \
	    stringify(name),                                                   \
	    typesafe_cb_cast(void (*)(void *, const char *, const jsmntok_t *),\
			     void (*)(response_cb_arg_type,		       \
				      const char *, const jsmntok_t *),	       \
			     response_cb),                                     \
	    typesafe_cb_cast(void (*)(void *, struct json_stream *),           \
			     void (*)(payload_type, struct json_stream *),     \
			     serialize_payload),                               \
	    stringify(label),                                                         \
	    NULL, /* .plugin */                                                \
	};                                                                     \
	AUTODATA(requests, &name##_request_gen);                                     \
	PLUGIN_REQUEST_CALL_DEF(name, payload_type, response_cb_arg_type);

bool plugin_request_register(struct plugin *plugin, const char *method);

bool check_plugin_request_consistency(void);

#endif /* LIGHTNING_LIGHTNINGD_PLUGIN_REQUEST_H */
